<resources>
    <string name="app_name">ComputationalDemonology</string>
    <string name="action_settings">Settings</string>
    <string name="code">CASE CODE GAME INDEX OPERATION INCIDENT SCENARIO SEQUENCE PLAN PROJECT</string>
    <string name="nouns">BLUE RED GREEN BLACK VIOLET WHITE MAUVE CODEX PENAL BOVINE EQUUS FELINE CANINE OATMEAL CRIVENS
    NIGHTMARE salt scar wound bone ball bat bed book boy bun can cake cap car cat cow cub cup dad day dog doll dust fan feet girl gun
hall hat hen jar kite man map men mom pan pet pie pig pot rat son sun toe tub van apple arm banana bike bird book chin
clam class clover club corn crayon crow crown crowd crib desk dime dirt dress fang field flag flower fog game heat hill
home horn hose joke juice kite lake maid mask mice milk mint meal meat moon mother morning name nest nose pear pen
pencil plant rain river road rock room rose seed shape shoe shop show sink snail snake snow soda sofa star step stew
stove straw string summer swing table tank team tent test toes tree vest water wing winter woman women  2nd Grade
alarm animal aunt bait balloon bath bead beam bean bedroom boot bread brick brother camp chicken children crook deer
dock doctor downtown drum dust eye family father fight flesh food frog goose grade grandfather grandmother grape grass
hook horse jail jam kiss kitten light loaf lock lunch lunchroom meal mother notebook owl pail parent park plot rabbit
rake robin sack sail scale sea sister soap song spark space spoon spot spy summer tiger toad town trail tramp tray
trick trip uncle vase winter water week wheel wish wool yard zebra actor airplane airport army baseball beef birthday
boy brush bushes butter cast cave cent cherries cherry cobweb coil cracker dinner eggnog elbow face fireman flavor gate
glove glue goldfish goose grain hair haircut hobbies holiday hot jellyfish ladybug mailbox number oatmeal pail pancake
pear pest popcorn queen quicksand quiet quilt rainstorm scarecrow scarf stream street sugar throne toothpaste twig
volleyball wood wrench advice anger answer apple arithmetic badge basket basketball battle beast beetle beggar brain
branch bubble bucket cactus cannon cattle celery cellar cloth coach coast crate cream daughter donkey drug earthquake
feast fifth finger flock frame furniture geese ghost giraffe governor honey hope hydrant icicle income island jeans
judge lace lamp lettuce marble month north ocean patch plane playground poison riddle rifle scale seashore sheet
sidewalk skate slave sleet smoke stage station thrill throat throne title toothbrush turkey underwear vacation
vegetable visitor voyage year able achieve acoustics action activity aftermath afternoon afterthought apparel appliance
beginner believe bomb border boundary breakfast cabbage cable calculator calendar caption carpenter cemetery channel
circle creator creature education faucet feather friction fruit fuel galley guide guitar health heart idea kitten
laborer language lawyer linen locket lumber magic minister mitten money mountain music partner passenger pickle picture
plantation plastic pleasure pocket police pollution railway recess reward route scene scent squirrel stranger suit
sweater temper territory texture thread treatment veil vein volcano wealth weather wilderness wren wrist writer </string>
    <string name="htmlparse">You can\'t parse [X]HTML with regex. Because HTML can\'t be parsed by regex. Regex is not a tool that can be used to
correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will
not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the
constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex
queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even
enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me
crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet
cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy
child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls
into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The
&lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will
destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their
blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual
Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in
the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is
too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML
which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse
HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML
establishes a breach between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more
corrupt) a mere glimpse of the world of reg​ex parsers for HTML will ins​tantly transport a programmer\'s consciousness
into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil​l devour your HT​ML parser,
application and existence for all time like Visual Basic only worse he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s
un̨ho͞ly radiańcé destro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain,
the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can
you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the
pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the
an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ  </string>
    <string name="lovecraft">Hastur Ithaqua Nyarlathotep Zhar Lloigor	Cyäegha Nyogtha Shub-Niggurath Tsathoggua	Aphoom-Zhah Cthugha	Cthulhu Dagon
Ghatanothoa Mother Hydra Zoth-Ommog Abhoth Aiueb Gnshal Azathoth Azhorra-Tha The Blackness from the Stars The Cloud-Thing C\'thalpa Cxaxukluth Daoloth
 Darkness D’endrrah Ghroth The Hydra Ialdagorth Kaajh\'Kaalbh Lu-Kthu Mh\'ithrha Mlandoth and Mril Thorion Mother of
 Pus The Nameless Mist Ngyr-Korath Nyarlathotep Nyctelios Ny-Rakath Olkoth Shabbith-Ka Shub-Niggurath Star Mother
 Suc\'Naath Tru\'nembra Tulzscha Ubbo-Sathla Uvhash Xa\'ligha Xexanoth Ycnàgnnisssz Yhoundeh Yibb-Tstll Yidhra
 Yog-Sothoth Yomagn\'tho Elder Gods List Bast Kthanid Orryx Oztalun Nodens Shavalyoth Ulthar Vorvadoss Yad-Thaddag
 Yaggdytha</string>
    <string name="hwords">destroy kill avenge reap exterminate unmake sweep away kill extirpate wipe
        pulverise pulverize rase end dilapidate disassemble self-destruct
break apart eliminate fracture take down break up dismantle take apart undo tear down interdict demyelinate
self-destroy demolish  level pull down destruct uproot extinguish raze root out eradicate</string>
    <string name="occult">Abbey Thelema Abramelin oil Adept Aether Akashic Records Alchemy Desire Animism Anthroposophy Argenteum Astrum
Ariosophy Asatru Ascended master Astral projection Astrological age aspect Astrology alchemy classical elements
numerology Athame Aura Augury Automatic writing  Banishing Baphomet Bibliomancy Biosophy Black magic Black Sun Body of
light Boline Bön  Candomblé Cartomancy Ceremonial magic Chalice Chaos magic Charmstone Clairvoyance Classical element
Cleromancy Collective unconscious Cone of power Coven Cross St. Peter Curse  Da\'at Damballa Demonology Disappearance
Divination Dowsing Druidism  Eight-circuit model of consciousness Elemental Enochian Esoteric Christianity Esoteric
cosmology Esotericism Evocation Exorcism  Fama Fraternitatis Familiar spirit Feri Tradition Folk Magic Fortune-telling
Galdr Gematria Geomancy Geomantic figures Gnosis Goetia Gray Magic Greater Magic and Lesser Magic Grimoire  Hadit
Haitian Vodou Haruspex Hermeticism Hexagram Hex Holy Guardian Angel Homunculus Hoodoo Huna Human sacrifice  I Ching
Initiation Incantation Invocation  Juju  Kabbalah Kemetism Kumina Kundalini energy  contagion Left-hand
right-hand Legendary creature Lesser ritual of the pentagram List of occultists List of occult writers Literomancy
Lithomancy Louisiana Voodoo Lucifer  Magic (paranormal) Magic circle Magic word Magical formula Magick Maleficium
(sorcery) Mathers table Mediumship Merkabah Mesmerism Methods of divination Mojo Mystery religion Mysticism Myth and
ritual  Nagual Necromancy Necronomicon Neodruidism Neopaganism Neoplatonism Neotantra Nephilim New Age New Thought
Nosferatu Nuit Numerology  Obeah Obeah Wanga Occultism Omen Oracle Ouija  Paganism Palmistry Pentacle Penuel
Planetary hours Power Animal Pow-wow (folk magic) Psionics Psychics Psychonautics Pyramid power  Qabalah Qi Quantum
mysticism Quimbanda  Reality hacking Reiki Reincarnation Resurrection Rhabdomancy Ritual Rosicrucianism Runecasting
Sacrifice Santería Satan Satanism Scrying Séance Secret Chiefs Seidr Seven Rays Sex magic Shamanism Sigil Spell
Stregheria  Table of correspondences Talisman Tantra Tarot divination Thaumaturgy Thelema Thelemic mysticism Theosophy
Therianthropy Theurgy Trance Transfiguration Transmutation True Will Typhonian  Vodun  Wand West African Vodun Wicca
Witchcraft  Ya sang  Zos Kia Cultus</string>
    <string name="lisp1" formatted="false"> (defun read-separator (str)
 (let
  ((*readtable* (copy-readtable *readtable* nil)))
  (set-macro-character #\, (lambda (stream char)
                            (declare (ignore char) (ignore stream))
                            \'break))
  (read str nil)))

(set-macro-character #\{
 (lambda (str char)
  (declare (ignore char))
  (let
   ((*readtable* (copy-readtable *readtable* nil)))
   (set-macro-character #\} (lambda (stream char)
                             (declare (ignore char) (ignore stream))
                             \'end))

   (let
    ((pairs (loop for key = (read str nil nil t)
                  for sep = (read str nil nil t)
                  for value = (read str nil nil t)
                  for end? = (read-separator str)
                  do (when (not (eql \'=> sep)) (error "Expected =>, did not get"))
                  do (when (not (or (eql \'end end?) (eql \'break end?))) (error "Expected , or }"))
                  collect (list key value)
                  while (not (eql \'end end?))))
     (retn (gensym)))
    `(let
      ((,retn (make-hash-table :test #\'equal)))
      ,@(mapcar
         (lambda (pair)
          `(setf (gethash ,(car pair) ,retn) ,(cadr pair)))
         pairs)
      ,retn)))))
    (defun read-listcomp (stream char)
  (declare (ignore char))
  (let (rezs srcs conds state)
    (dolist (item (read-delimited-list #\} stream))
      (if (eql \'|| item)
          (setf state (if state :cond :src))
          (case state
            (:src (push item srcs))
            (:cond (push item conds))
            (otherwise (push item rezs)))))
    (setf rezs (reverse rezs)
          srcs (reverse srcs)
          conds (reverse conds))
    (let ((binds (mapcar (lambda (group) (cons (first group) (third group)))
                         (group 3 srcs))))
      `(mapcan (lambda ,(mapcar #\'car binds)
                 (when (and ,@conds)
                   (list ,(if (rest rezs)
                              (cons \'list rezs)
                              (first rezs)))))
               ,@(mapcar #\'cdr binds)))))

(set-macro-character #\{ #\'read-listcomp)
(set-macro-character #\} (get-macro-character #\)))</string>
</resources>
